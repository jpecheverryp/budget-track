// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: accounts.sql

package repository

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account (id, name, user_id)
VALUES (uuid_generate_v4(), $1, uuid_generate_v4())
RETURNING id, name, user_id, created_at, updated_at
`

func (q *Queries) CreateAccount(ctx context.Context, name string) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, name)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const readAllAccounts = `-- name: ReadAllAccounts :many
SELECT id, name, user_id, created_at, updated_at FROM account
`

func (q *Queries) ReadAllAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, readAllAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
